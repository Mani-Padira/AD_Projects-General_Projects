# -*- coding: utf-8 -*-
"""drag_quantity_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XHwAssJdyP8B0z_KExJISK6VY6ojqeUV
"""

import pandas as pd
import random

# Function to generate a sample dataset
def create_sample_data(num_samples):
    # Define the features and their possible values
    data = []
    for _ in range(num_samples):
        # Sample age, gender, height, weight, and region
        age = random.randint(5, 18)  # Age of patient (kids, so 5 to 18 years old)
        gender = random.choice(['Male', 'Female'])  # Gender
        height = random.randint(90, 180)  # Height in cm
        weight = random.randint(15, 70)  # Weight in kg
        region = random.choice(['Urban', 'Rural'])  # Region of the patient

        # Sample drag quantity (in arbitrary units, e.g., mg or ml)
        drag_quantity = random.uniform(0.5, 5.0)  # Random drag quantity for the patient

        # Add the row to the data list
        data.append([drag_quantity, age, gender, height, weight, region])

    # Create a DataFrame from the data list
    df = pd.DataFrame(data, columns=['Drag Quantity', 'Age', 'Gender', 'Height', 'Weight', 'Region'])

    return df

# Generate a dataset with 100 samples
num_samples = 10000
df = create_sample_data(num_samples)

# Save the DataFrame to a CSV file
csv_file = 'patient_drag_quantity_data.csv'
df.to_csv(csv_file, index=False)

print(f"CSV file '{csv_file}' has been created successfully with {num_samples} samples!")

data = r"/content/patient_drag_quantity_data.csv"

df = pd.read_csv(data)

df

import pandas as pd
import random

# Function to generate a sample dataset with 30 features
def create_sample_data(num_samples):
    data = []
    for _ in range(num_samples):
        # Sample data for 30 features

        # Demographic and health-related features
        age = random.randint(5, 18)  # Age in years
        gender = random.choice(['Male', 'Female'])  # Gender
        height = random.randint(90, 180)  # Height in cm
        weight = random.randint(15, 70)  # Weight in kg
        region = random.choice(['Urban', 'Rural'])  # Region

        # Educational level (for example, grade level)
        grade_level = random.choice(['Grade 1', 'Grade 2', 'Grade 3', 'Grade 4', 'Grade 5', 'Grade 6', 'Grade 7', 'Grade 8'])

        # Number of siblings
        num_siblings = random.randint(0, 5)

        # Parent(s) health condition (binary: 1 = healthy, 0 = condition)
        parent_health = random.choice([0, 1])

        # Type of household (binary: 1 = nuclear, 0 = extended)
        household_type = random.choice([0, 1])

        # Medical history (e.g., history of asthma or allergies, binary features)
        asthma_history = random.choice([0, 1])
        allergy_history = random.choice([0, 1])
        chronic_disease_history = random.choice([0, 1])

        # Family income (in thousands of dollars)
        family_income = random.randint(20, 100)

        # Access to healthcare (binary: 1 = Yes, 0 = No)
        access_healthcare = random.choice([0, 1])

        # Mother's education level
        mother_education = random.choice(['High School', 'Associate Degree', 'Bachelor Degree', 'Master Degree', 'Doctorate'])

        # Father's education level
        father_education = random.choice(['High School', 'Associate Degree', 'Bachelor Degree', 'Master Degree', 'Doctorate'])

        # Number of chronic conditions
        num_chronic_conditions = random.randint(0, 3)

        # Average daily screen time (in hours)
        screen_time = random.uniform(0.5, 6.0)

        # Body Mass Index (BMI) - calculated from height and weight
        bmi = round(weight / (height / 100) ** 2, 2)

        # Exercise frequency (per week)
        exercise_frequency = random.choice([0, 1, 2, 3, 4, 5, 6, 7])  # Days per week

        # Diet quality (scale of 1 to 5)
        diet_quality = random.choice([1, 2, 3, 4, 5])

        # Sleep hours per night
        sleep_hours = random.uniform(5.0, 10.0)

        # Chronic medication usage (binary: 1 = Yes, 0 = No)
        chronic_medication = random.choice([0, 1])

        # Allergic to medications (binary: 1 = Yes, 0 = No)
        allergic_medication = random.choice([0, 1])

        # Drag quantity (in arbitrary units)
        drag_quantity = random.uniform(0.5, 5.0)

        # Add the row to the data list
        data.append([drag_quantity, age, gender, height, weight, region, grade_level, num_siblings,
                     parent_health, household_type, asthma_history, allergy_history, chronic_disease_history,
                     family_income, access_healthcare, mother_education, father_education, num_chronic_conditions,
                     screen_time, bmi, exercise_frequency, diet_quality, sleep_hours, chronic_medication,
                     allergic_medication])

    # Create a DataFrame from the data list
    df = pd.DataFrame(data, columns=[
        'Drag Quantity', 'Age', 'Gender', 'Height', 'Weight', 'Region', 'Grade Level', 'Num Siblings',
        'Parent Health', 'Household Type', 'Asthma History', 'Allergy History', 'Chronic Disease History',
        'Family Income', 'Access to Healthcare', 'Mother Education', 'Father Education', 'Num Chronic Conditions',
        'Screen Time', 'BMI', 'Exercise Frequency', 'Diet Quality', 'Sleep Hours', 'Chronic Medication',
        'Allergic Medication'
    ])

    return df

# Generate a dataset with 1000 samples
num_samples = 10000
df = create_sample_data(num_samples)

# Save the DataFrame to a CSV file
csv_file = 'patient_drag_quantity_data_with_30_features.csv'
df.to_csv(csv_file, index=False)

print(f"CSV file '{csv_file}' has been created successfully with {num_samples} samples!")

import pandas as pd
data =r"/content/patient_drag_quantity_data_with_30_features.csv"
df = pd.read_csv(data)

df



import pandas as pd
import random
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
import xgboost as xgb
import numpy as np



# Save the DataFrame to a CSV file
csv_file = 'patient_drag_quantity_data_with_30_features.csv'
df.to_csv(csv_file, index=False)

# Load the dataset
df = pd.read_csv(csv_file)
print(df)
# Preprocess categorical features using LabelEncoder
label_encoder = LabelEncoder()

# Encoding categorical columns
categorical_cols = ['Gender', 'Region', 'Grade Level', 'Mother Education', 'Father Education']
for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])

# Features and target
X = df.drop(columns=['Drag Quantity'])
y = df['Drag Quantity']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize models
models = {
    'Linear Regression': LinearRegression(),
    'Random Forest': RandomForestRegressor(),
    'Decision Tree': DecisionTreeRegressor(),
    'XGBoost': xgb.XGBRegressor()
}

# Train models and evaluate using RMSE
for model_name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)

    # Predict on the test set
    y_pred = model.predict(X_test)

    # Calculate RMSE
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))

    # Print RMSE for each model
    print(f"{model_name} - RMSE: {rmse:.4f}")

import pickle
with open('drag_prediction.pkl', 'wb') as f:
    pickle.dump(model, f)

print("Model has been saved as 'drag_prediction.pkl'")

# Step 7: Download the pickle file to your local machine
from google.colab import files
files.download('drag_prediction.pkl')